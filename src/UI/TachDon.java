/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Core.Bill;
import Core.Order;
import Manager.ManagerBill;
import Manager.ManagerOrder;
import Manager.ManagerTempData;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author VINH DAT
 */
public class TachDon extends javax.swing.JFrame {

    /**
     * Creates new form TachDon
     */
    public boolean checkChuyenBan(String ban) {
        String word[] = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"};
        for (String i : word) {
            if (i.equals(ban)) {
                return true;
            }
        }
        return false;
    }

    public TachDon() {
        initComponents();
        next();
    }

    public void next() {
        ManagerTempData bb = new ManagerTempData();
        ManagerOrder cc = new ManagerOrder();
        ArrayList<Order> list = cc.findOrder(bb.getTempTable());
        Vector head = new Vector();
        Vector data = new Vector();
        head.add("Mã món");
        head.add("Tên món");
        head.add("Số lượng gốc");
        head.add("Số lượng tách");

        for (Order i : list) {
            Vector row = new Vector();
            row.add(i.getMamon());
            row.add(i.getTenMon());
            row.add(i.getSoluong());
            row.add(0);
            data.add(row);
        }
        bb.closeConnection();
        cc.closeConnection();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setDataVector(data, head);
        TableColumn c = null;
        c=table.getColumnModel().getColumn(0);
        c.setPreferredWidth(30);
        c=table.getColumnModel().getColumn(1);
        c.setPreferredWidth(300);
        c=table.getColumnModel().getColumn(2);
        c.setPreferredWidth(100);
        c=table.getColumnModel().getColumn(3);
        c.setPreferredWidth(100);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btnOK = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTable = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        jLabel1.setText("Nhập bàn mới nếu chưa thanh toán");

        btnBack.setText("Trở về");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTable, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(btnBack)
                .addContainerGap(469, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // TODO add your handling code here:
        ManagerBill aa = new ManagerBill();
        ManagerTempData bb = new ManagerTempData();
        ManagerOrder cc = new ManagerOrder();
        ArrayList<Order> kqNew = new ArrayList<>();
        ArrayList<Order> kqOld = new ArrayList<>();
        int row = cc.countFoodInOrder(bb.getTempTable());
        for (int i = 0; i < row; i++) {
            double temptemp = 0;
            double SoLuongCu = Double.parseDouble(table.getValueAt(i, 2).toString().trim());
            if (table.getValueAt(i, 2).toString() != null) {
                Double tempOld = Double.parseDouble(table.getValueAt(i, 2).toString());
                Double tempNew = Double.parseDouble(table.getValueAt(i, 3).toString());
                if (tempNew > tempOld) {
                    JOptionPane.showMessageDialog(null, "Số lượng tách không được lớn hơn số lượng gốc");
                    return;
                }
                if (tempNew > 0) {
                    Order orderNew = new Order("", table.getValueAt(i, 0).toString(), table.getValueAt(i, 1).toString(), tempNew);
                    kqNew.add(orderNew);
                }
                temptemp = tempNew;
            }
            if (SoLuongCu - temptemp > 0) {
                Order orderOld = new Order(bb.getTempTable(), table.getValueAt(i, 0).toString(), table.getValueAt(i, 1).toString(), SoLuongCu - temptemp);
                kqOld.add(orderOld);
            }
        }
        if (!txtTable.getText().toString().trim().equals("")) {
            String ban = txtTable.getText().toString().trim();
            if (ban.equals(bb.getTempTable())) {
                JOptionPane.showMessageDialog(null, "Không được chọn bàn đang ngồi");
                return;
            }
            if (!checkChuyenBan(ban)) {
                JOptionPane.showMessageDialog(null, "Bàn không hợp lệ");
                return;
            }
            cc.deleteOrder(bb.getTempTable());
            int sl=0;
            for (Order i : kqOld) {
                sl+=i.getSoluong();
                cc.addNewOrder(i);
            }
            Bill bill = new Bill("", ban, aa.getDateTime(bb.getTempTable()), "");
            if(sl==0){
                ManagerBill hh = new ManagerBill();
                hh.deleteBill(bb.getTempTable());
                hh.closeConnection();
            }
            for(Order i: kqNew){
                if(cc.HaveYetThisFoodInTable(i.getTenMon(), ban)){
                    Order o = cc.findOrderByBanAndTenMon(ban, i.getTenMon());
                    o.setSoluong(o.getSoluong()+i.getSoluong());
                    cc.updateSoLuongOrder(o);
                }else{
                    Order order = new Order(ban, i.getMamon(), i.getTenMon(), i.getSoluong());
                    cc.addNewOrder(order);
                }
                cc.closeConnection();
            }
            aa.addNewBill(bill);
            JOptionPane.showMessageDialog(null, "Đã tách");
            this.hide();
            aa.closeConnection();
            bb.closeConnection();
            cc.closeConnection();
            Map a = new Map();
            a.setLocationRelativeTo(null);
            a.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            a.setVisible(true);
        } else {
            for (Order i : kqNew) {
                i.setBan(bb.getTempTable() + "_tach");
                cc.addNewOrder(i);
            }
            cc.deleteOrder(bb.getTempTable());
            int sl = 0;
            for (Order i : kqOld) {
                sl += i.getSoluong();
                cc.addNewOrder(i);
            }
            Bill bill = new Bill("", bb.getTempTable() + "_tach", aa.getDateTime(bb.getTempTable()), "");
            if (sl == 0) {
                ManagerBill hh = new ManagerBill();
                hh.deleteBill(bb.getTempTable());
                hh.closeConnection();
            }
            aa.addNewBill(bill);
            bb.writeTempTable(bb.getTempTable() + "_tach");
            aa.closeConnection();
            bb.closeConnection();
            cc.closeConnection();
            TinhTien a = new TinhTien();
            a.setLocationRelativeTo(null);
            a.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            a.setVisible(true);
            this.hide();
        }

    }//GEN-LAST:event_btnOKActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        OrderUI a = new OrderUI();
        a.setLocationRelativeTo(null);
        a.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        a.setVisible(true);
        this.hide();
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TachDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TachDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TachDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TachDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TachDon().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtTable;
    // End of variables declaration//GEN-END:variables
}
